---
layout: post
title:  "Окружение разработчика. Часть 1"
date:   2018-05-12 20:00:54 +0000
categories: computer science
---

Программирование - искусство контролировать сложность.

Любой программист в какой-то момент я столкивается содной весьма неприятную вещью - код быстро устаревает.
Узнаёшь новый способ обойти массив - и он оказывается более удобным/быстрым чем ранее используемый вариант.
Находишь полезную либу на GitHub - и (не) понимаешь, что она идеально заменит пока простой, но совершенно хардкодный костыль.
Хочешь добавить новый функционал но - упс - код уже превратился в тыкву и проще написать всё заново.

Написать всё заново. Это почти всегда плохая идея, т.к. она противоположна главной задаче программиста - экономить время.
Нужно иметь большой опыт в распознавании ситуаций, когда можно съэкономить кучу времени в перспективе, переписав
всё заново.

Как же писать новое, не ломая старое, при этом не нарушая принципа dont repeat youself (а лучше даже - anybody) ?
Попробуем разобраться.

Путем недолгих размышлений =) я декомпозировал проблему на 2 проблемы поменьше - плохой код и плохая организация процесса.
В данном цикле статей я почти не буду касаться первой и хорошенько проедусь по второй, так как в последнее
время она стала для меня очень насущной, при том что решение этой проблемы ГОРАЗНО проще борьбы с плохим
кодом (привет, легаси!). Тем более что само понятие "плохой код" имеет свойство меняться от случая к случаю.
Для наглядности, давайте выделим критерии хорошо организованного процесса:

- программисту желательно заниматься только программированием. Всё что вне программирования должно не мешать, не отвлекать
и не ограничивать программиста, творческую личность %)
- для web - по возможности полное соотвествие (12factor)[https://12factor.net/ru/]
Дальше я буду постоянно ссылаться на 12factor
- адаптируемость под функциональные нужды. Здесь мы рассмотрим только техническую реализацию, которая должна
с минимальными усилиями подходить под любые адекватные требования разработчиков
- Минимальный набор устанавливаемого вручную ПО

По аналогии с когда-то популярными WAMP/LNMP и т.д. введём новую аббревиатуру, состоящую из 3 частей:
- инструмент для контроля версий кода (и конфигураций)
- инструмент для создания и управления артефактами
- инструмент для написания сценариев

Итого, я выбрал такой стек: Git + Docker + Bash = GDB (Не путать с GNU Debugger) 
Любую составляющую можно заменить, если есть чем. Поехали.

### Делаем артефакт из проекта




{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}


[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
